#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#    This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.

import gi

gi.require_version('Gimp', '3.0')
from gi.repository import Gimp

gi.require_version('GimpUi', '3.0')
from gi.repository import GimpUi

gi.require_version('Gegl', '0.4')
from gi.repository import Gegl
from gi.repository import GObject
from gi.repository import GLib
from gi.repository import Gio

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

gi.require_version('Gdk', '3.0')
from gi.repository import Gdk

gi.require_version("WebKit2", "4.0")
from gi.repository import WebKit2 as WebKit

import sys
from typing import Tuple
from struct import pack
from binascii import hexlify


HEAD_TEXT = "Create a QR Code using qrcode python library."


def color_to_hex(color: Tuple[int, int, int]) -> str:
    return f"#{hexlify(pack('BBB', *color)).decode()}ff"


def gimp_color_to_hex(color: Gimp.RGB) -> str:
    r = int(255*color.r)
    g = int(255*color.g)
    b = int(255*color.b)
    return color_to_hex((r, g, b))


class PyDevClient(Gimp.PlugIn):
    ## Properties: parameters ##
    @GObject.Property(type=Gimp.RunMode,
                      default=Gimp.RunMode.NONINTERACTIVE,
                      nick="Run mode", blurb="The run mode")
    def run_mode(self):
        """Read-write integer property."""
        return self.runmode

    @run_mode.setter
    def run_mode(self, runmode):
        self.runmode = runmode

    def do_query_procedures(self):
        return ["python-create-qrcode"]

    def do_create_procedure(self, name):
        procedure = Gimp.Procedure.new(
            self,
            name,
            Gimp.PDBProcType.PLUGIN,
            self.run, None
        )

        # procedure.set_image_types("*")

        procedure.set_menu_label("QR Codes")
        # procedure.set_icon_name(GimpUi.ICON_GEGL)
        procedure.add_menu_path('<Image>/Python/Create')

        procedure.set_documentation(
            "Create a QR Code",
            "Create a QR Code",
            name
        )
        procedure.set_attribution("Ismael Benito", "Ismael Benito", "2021")

        procedure.add_argument_from_property(self, "run-mode")

        return procedure

    def run(self, procedure, args, run_data):

        GimpUi.init("python-create-qrcode")

        dialog = GimpUi.Dialog(
            use_header_bar=True,
            title="Create QR Code",
            role="python-create-qrcode"
        )

        dialog.add_button("Cancel", Gtk.ResponseType.CANCEL)
        dialog.add_button("Source", Gtk.ResponseType.APPLY)
        dialog.add_button("OK", Gtk.ResponseType.OK)

        dialog.set_default_size(720, 480)

        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=2)
        dialog.get_content_area().add(box)
        box.show()

        label = Gtk.Label(label=HEAD_TEXT)
        box.pack_start(label, False, False, 1)
        label.show()

        contents = None

        if contents is not None:
            # import here when we have ensured requirements are installed.
            import markdown

            scrolled = Gtk.ScrolledWindow()
            scrolled.set_vexpand(True)
            box.pack_start(scrolled, True, True, 1)
            scrolled.show()

            webview = WebKit.WebView()
            webview.load_html(markdown.markdown(contents, extensions=['fenced_code']), None)
            scrolled.add(webview)
            webview.show()

        while True:
            response = dialog.run()
            if response == Gtk.ResponseType.OK:

                import qrcode
                from gimp.image import display_image
                import numpy as np

                qr = qrcode.QRCode(
                    version=5,
                    error_correction=qrcode.ERROR_CORRECT_H,
                    box_size=10,
                    border=4
                )

                foreground = Gimp.context_get_foreground()[-1]
                background = Gimp.context_get_background()[-1]

                qr.add_data("GIMP Python Plug-ins ðŸ˜Ž")
                qr.make()
                qr_img = qr.make_image(
                    fill_color=gimp_color_to_hex(foreground),
                    back_color=gimp_color_to_hex(background)
                ).get_image()
                qr_img_arr = np.array(qr_img.convert("RGB")).astype(np.uint8)
                display_image(qr_img_arr)

                dialog.destroy()
                break
            elif response == Gtk.ResponseType.APPLY:
                url = "https://github.com/isman7/gimp-qrcode"
                Gio.app_info_launch_default_for_uri(url, None)
                continue
            else:
                dialog.destroy()
                return procedure.new_return_values(
                    Gimp.PDBStatusType.CANCEL,
                    GLib.Error()
                )

        # th.terminate()

        return procedure.new_return_values(Gimp.PDBStatusType.SUCCESS, GLib.Error())


Gimp.main(PyDevClient.__gtype__, sys.argv)
